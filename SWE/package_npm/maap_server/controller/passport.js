/** * File: passport.js * Module: maap_server::controller * Author: Alberto Garbui * Created: 03/05/14 * Version: 0.1 * Description: inizializzazione, gestione passport e nodemailer * Modification History: ============================================== * Version | Changes ============================================== * 0.1 File creation ============================================== */ 'use strict';var passport = require("passport");var nodemailer = require("nodemailer");var LocalStrategy = require('passport-local').Strategy;var DB = require('../ModelServer/Database/MongooseDBFramework');//gestione recupero mail con nodemailervar smtpTransport;var mail = {};var initPassport = function(app) {	var config = app.config;		console.log("passport init...");	app.use(passport.initialize());	app.use(passport.session());			passport.use(new LocalStrategy({		usernameField: 'email',		passwordField: 'password'	},		function(email, password, done) {			DB.users.findOne({ email: email, password: password},function(err,user){				if(err) { console.log('errore!'); return done(err); }				if(!user){					console.log('no user!');					return done(null, false, { message: 'Incorrect username.' });				}				//console.log('OK');				return done(null, user);			});		}	));		passport.serializeUser(function(user, done) {		done(null, user);	});	passport.deserializeUser(function(user, done) {		done(null, user);	});		//servizio nodemailer config	smtpTransport = nodemailer.createTransport("SMTP",{		service: config.app.nodemailerConfig.service,		auth: {			user: config.app.nodemailerConfig.user,			pass: config.app.nodemailerConfig.pass		}	});		//impostazioni standard dell'email di recupero password	mail.from = config.app.title + ' <' + config.app.nodemailerConfig.user + '>'; 	mail.subject = config.app.title + ' password request';	};//questa funzione recupera la password nel db utenti in base all'username indicato nella request//ed invia la mail contenente username e password all'utentevar forgotPassword = function(req, res, next){	var userMail = 'alberto.garbui@gmail.com'; //for testing...	//var userMail = req.body.usermail;			DB.users.findOne({ email: userMail},function(err,user){		if(err)		{			console.log('Forgot password request from ' + req.connection.remoteAddress + ' for user ' + userMail + ' failed: ' + err);			res.send(401);		}		if(!user)		{			console.log('Forgot password request from ' + req.connection.remoteAddress + ' for user ' + userMail + ' failed: no user found!');			res.send(401);		}else{					var userPassword = user.password;	//query nel db					var userProfileLink = req.config.app.host + ':' + req.config.app.port + '/profile';			if(req.config.app.ssl)			{				userProfileLink = 'https://' + userProfileLink;			}else{				userProfileLink = 'http://' + userProfileLink;			}						mail.to = userMail;						mail.text = req.config.app.title + ' received a forgot password request from: ' + req.connection.remoteAddress + '\nYour username is: ' + userMail + ' and your password is: ' + userPassword;			mail.text += '\nYou may manage your profile from your user profile: ' + userProfileLink;			mail.text += '\n\nIf you didn\'t request your password, ignore this mail.';							mail.html = '<p><b>' + req.config.app.title + '</b> received a forgot password request from: <b>' + req.connection.remoteAddress + '</b></p>';			mail.html += '<p>Here you have your account details:</p>';			mail.html += '<p>username: <b>' + userMail + '</b></p>';			mail.html += '<p>password: <b>' + userPassword + '</b></p>';			mail.html += '<p>You may manage your profile from your <a href="' + userProfileLink + '">user profile</a></p>';			mail.html += '<p>If you didn\'t request your password, ignore this mail.</p>';						//invio mail			smtpTransport.sendMail(mail, function(error, response){				if(error){					console.log(error);					res.send(401);				}else{					console.log('Forgot password request from ' + req.connection.remoteAddress + ' for user ' + userMail + ' has been sent: ' + response.message);					next();				}			});					}//end else if(!user)	}); //end DB.find};exports.forgotPassword = forgotPassword;var checkAuthenticatedAdmin = function(req, res, next){	    if (req.isAuthenticated() && req.session.passport.user.level == 1)	{		console.log('check admin auth -> ok');		next();	}else{		console.log('check admin auth -> fail');		res.send(401);	}}var checkAuthenticated = function(req, res, next){    if (!req.isAuthenticated())	{		console.log('check auth -> fail');		res.send(401);	}else{		console.log('check auth -> ok');		next();	}}var checkNotAuthenticated = function(req, res, next){    if (req.isAuthenticated())	{		console.log('check NOT auth -> fail');		res.send(401);	}else{		console.log('check NOT auth -> ok');		next();	}}exports.authenticate = passport.authenticate('local');exports.init = initPassport;exports.checkAuthenticatedAdmin = checkAuthenticatedAdmin;exports.checkAuthenticated = checkAuthenticated;exports.checkNotAuthenticated = checkNotAuthenticated;